<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patent Claims to Mermaid Generator</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mermaid/10.6.1/mermaid.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
            max-width: 600px;
            margin: 0 auto;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            padding: 30px;
            min-height: 600px;
        }

        .input-section {
            background: #ffffff;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 2px solid #e0e6ed;
        }

        .output-section {
            background: #ffffff;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 2px solid #e0e6ed;
            position: relative;
            overflow: hidden;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .icon {
            width: 24px;
            height: 24px;
            fill: currentColor;
        }

        #claimsInput {
            width: 100%;
            height: 400px;
            border: 2px solid #e0e6ed;
            border-radius: 10px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.5;
            resize: vertical;
            outline: none;
            transition: all 0.3s ease;
        }

        #claimsInput:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .button-group {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #495057;
            border: 2px solid #e9ecef;
        }

        .btn-secondary:hover {
            background: #e9ecef;
            transform: translateY(-1px);
        }

        .btn-success {
            background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
            color: white;
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(86, 171, 47, 0.4);
        }

        #mermaidOutput {
            min-height: 400px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            border-radius: 10px;
            border: 2px dashed #dee2e6;
            color: #6c757d;
            font-style: italic;
            transition: all 0.3s ease;
        }

        #mermaidOutput.has-content {
            background: white;
            border: 2px solid #e0e6ed;
            align-items: flex-start;
            justify-content: flex-start;
            padding: 20px;
        }

        .placeholder-text {
            text-align: center;
            max-width: 300px;
        }

        .stats-bar {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
            display: none;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
        }

        .stat-item {
            text-align: center;
        }

        .stat-number {
            font-size: 1.5rem;
            font-weight: 700;
            color: #667eea;
            display: block;
        }

        .stat-label {
            font-size: 0.8rem;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .loading {
            display: none;
            text-align: center;
            color: #667eea;
            font-weight: 500;
        }

        .loading::after {
            content: '';
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid #667eea;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .example-section {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
        }

        .example-title {
            font-weight: 600;
            color: #495057;
            margin-bottom: 10px;
            font-size: 0.9rem;
        }

        .example-text {
            font-size: 0.8rem;
            color: #6c757d;
            line-height: 1.4;
            font-family: 'Courier New', monospace;
            background: white;
            padding: 10px;
            border-radius: 5px;
            border-left: 4px solid #667eea;
        }

        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 30px;
            padding: 30px;
            background: #f8f9fa;
        }

        .feature-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .feature-icon {
            width: 48px;
            height: 48px;
            margin: 0 auto 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .feature-icon svg {
            width: 24px;
            height: 24px;
            fill: white;
        }

        .feature-title {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .feature-description {
            color: #6c757d;
            font-size: 0.9rem;
            line-height: 1.4;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
                gap: 20px;
                padding: 20px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .button-group {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Patent Claims to Mermaid Generator</h1>
            <p>Transform patent claims into USPTO-compliant technical drawings instantly. Built for legal professionals using cutting-edge AI.</p>
        </div>

        <div class="main-content">
            <div class="input-section">
                <h2 class="section-title">
                    <svg class="icon" viewBox="0 0 24 24">
                        <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                    </svg>
                    Patent Claims Input
                </h2>
                
                <textarea id="claimsInput" placeholder="Paste your patent claims here...

Example:
1. A data processing system comprising:
   a processor (12) configured to receive input data;
   a database (14) operatively connected to the processor (12);
   a user interface (16) in communication with the processor (12);
   wherein the processor (12) is configured to process the input data and store results in the database (14)."></textarea>

                <div class="button-group">
                    <button class="btn btn-primary" onclick="generateDiagram()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M11,16.5L18,9.5L16.59,8.09L11,13.67L7.91,10.59L6.5,12L11,16.5Z"/>
                        </svg>
                        Generate Diagram
                    </button>
                    <button class="btn btn-secondary" onclick="loadExample()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19,3H5C3.9,3 3,3.9 3,5V19C3,20.1 3.9,21 5,21H19C20.1,21 21,20.1 21,19V5C21,3.9 20.1,3 19,3M19,19H5V5H19V19M13.96,12.29L11.21,15.83L9.25,13.47L6.5,17H17.5L13.96,12.29Z"/>
                        </svg>
                        Load Example
                    </button>
                    <button class="btn btn-secondary" onclick="clearInput()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z"/>
                        </svg>
                        Clear
                    </button>
                </div>

                <div class="example-section">
                    <div class="example-title">💡 Pro Tip:</div>
                    <div class="example-text">Include reference numbers in parentheses (12), (14), etc. for automatic component numbering that matches USPTO conventions.</div>
                </div>
            </div>

            <div class="output-section">
                <h2 class="section-title">
                    <svg class="icon" viewBox="0 0 24 24">
                        <path d="M12,2L13.09,8.26L22,9L13.09,9.74L12,16L10.91,9.74L2,9L10.91,8.26L12,2M12,11.5A2.5,2.5 0 0,0 9.5,14A2.5,2.5 0 0,0 12,16.5A2.5,2.5 0 0,0 14.5,14A2.5,2.5 0 0,0 12,11.5Z"/>
                    </svg>
                    USPTO-Compliant Diagram
                </h2>

                <div class="loading" id="loadingIndicator">
                    Generating patent drawing...
                </div>

                <div id="mermaidOutput">
                    <div class="placeholder-text">
                        <svg width="48" height="48" viewBox="0 0 24 24" fill="#dee2e6">
                            <path d="M12,2L13.09,8.26L22,9L13.09,9.74L12,16L10.91,9.74L2,9L10.91,8.26L12,2M12,11.5A2.5,2.5 0 0,0 9.5,14A2.5,2.5 0 0,0 12,16.5A2.5,2.5 0 0,0 14.5,14A2.5,2.5 0 0,0 12,11.5Z"/>
                        </svg>
                        <p>Your USPTO-compliant patent diagram will appear here</p>
                    </div>
                </div>

                <div class="button-group" id="outputActions" style="display: none;">
                    <button class="btn btn-success" onclick="downloadMermaid()">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                        </svg>
                        Download .mmd
                    </button>
                    <button class="btn btn-secondary" onclick="copyToClipboard(event)">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"/>
                        </svg>
                        Copy Code
                    </button>
                </div>

                <div class="stats-bar" id="statsBar">
                    <div class="stat-item">
                        <span class="stat-number" id="componentCount">0</span>
                        <span class="stat-label">Components</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number" id="connectionCount">0</span>
                        <span class="stat-label">Connections</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number" id="processingTime">0ms</span>
                        <span class="stat-label">Processing Time</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="feature-grid">
            <div class="feature-card">
                <div class="feature-icon">
                    <svg viewBox="0 0 24 24">
                        <path d="M12,2L13.09,8.26L22,9L13.09,9.74L12,16L10.91,9.74L2,9L10.91,8.26L12,2M12,11.5A2.5,2.5 0 0,0 9.5,14A2.5,2.5 0 0,0 12,16.5A2.5,2.5 0 0,0 14.5,14A2.5,2.5 0 0,0 12,11.5Z"/>
                    </svg>
                </div>
                <div class="feature-title">USPTO Compliant</div>
                <div class="feature-description">Automatically generates diagrams that meet all USPTO requirements for patent drawings including font sizes, contrast, and formatting.</div>
            </div>

            <div class="feature-card">
                <div class="feature-icon">
                    <svg viewBox="0 0 24 24">
                        <path d="M12,18.5L21,9L19.59,7.59L12,15.17L4.41,7.59L3,9L12,18.5Z"/>
                    </svg>
                </div>
                <div class="feature-title">Intelligent Parsing</div>
                <div class="feature-description">Uses advanced pattern recognition to extract components and relationships from patent claims text automatically.</div>
            </div>

            <div class="feature-card">
                <div class="feature-icon">
                    <svg viewBox="0 0 24 24">
                        <path d="M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"/>
                    </svg>
                </div>
                <div class="feature-title">Professional Quality</div>
                <div class="feature-description">Generates publication-ready diagrams with proper reference numbering, standard symbols, and clear layouts.</div>
            </div>

            <div class="feature-card">
                <div class="feature-icon">
                    <svg viewBox="0 0 24 24">
                        <path d="M12,4.5C7,4.5 2.73,7.61 1,12C2.73,16.39 7,19.5 12,19.5C17,19.5 21.27,16.39 23,12C21.27,7.61 17,4.5 12,4.5M12,17C9.24,17 7,14.76 7,12C7,9.24 9.24,7 12,7C14.76,7 17,9.24 17,12C17,14.76 14.76,17 12,17M12,9C10.34,9 9,10.34 9,12C9,13.66 10.34,15 12,15C13.66,15 15,13.66 15,12C15,10.34 13.66,9 12,9Z"/>
                    </svg>
                </div>
                <div class="feature-title">Instant Results</div>
                <div class="feature-description">Generate professional patent drawings in seconds instead of hours, dramatically reducing costs and turnaround time.</div>
            </div>
        </div>
    </div>

    <script>
        // Initialize Mermaid
        mermaid.initialize({ 
            startOnLoad: true,
            theme: 'base',
            themeVariables: {
                primaryColor: '#ffffff',
                primaryTextColor: '#000000',
                primaryBorderColor: '#000000',
                lineColor: '#000000',
                background: '#ffffff'
            }
        });

        let currentMermaidCode = '';

        // Example patent claims
        const exampleClaims = `1. A data processing system comprising:
   a processor (12) configured to receive input data;
   a database (14) operatively connected to the processor (12);
   a user interface (16) in communication with the processor (12);
   a control module (18) connected to the processor (12);
   wherein the processor (12) is configured to process the input data and store results in the database (14).

2. The system of claim 1, further comprising:
   a display device (20) connected to the user interface (16) and configured to present processed data to a user;
   a sensor array (22) in communication with the control module (18).

3. The system of claim 2, wherein the control module (18) is configured to:
   receive sensor data from the sensor array (22);
   transmit control signals to the processor (12) based on the sensor data.`;

        function loadExample() {
            document.getElementById('claimsInput').value = exampleClaims;
        }

        function clearInput() {
            document.getElementById('claimsInput').value = '';
            clearOutput();
        }

        function clearOutput() {
            const output = document.getElementById('mermaidOutput');
            output.innerHTML = `
                <div class="placeholder-text">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="#dee2e6">
                        <path d="M12,2L13.09,8.26L22,9L13.09,9.74L12,16L10.91,9.74L2,9L10.91,8.26L12,2M12,11.5A2.5,2.5 0 0,0 9.5,14A2.5,2.5 0 0,0 12,16.5A2.5,2.5 0 0,0 14.5,14A2.5,2.5 0 0,0 12,11.5Z"/>
                    </svg>
                    <p>Your USPTO-compliant patent diagram will appear here</p>
                </div>
            `;
            output.className = '';
            document.getElementById('outputActions').style.display = 'none';
            document.getElementById('statsBar').style.display = 'none';
        }

        async function generateDiagram() {
            const claimsText = document.getElementById('claimsInput').value.trim();
            
            if (!claimsText) {
                alert('Please enter patent claims text');
                return;
            }

            const startTime = Date.now();
            showLoading(true);

            try {
                // Simulate processing delay for demo
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                const result = await processPatentClaims(claimsText);
                const processingTime = Date.now() - startTime;
                
                displayDiagram(result.mermaidCode, result.stats, processingTime);
            } catch (error) {
                console.error('Error generating diagram:', error);
                alert('Error generating diagram. Please check your input and try again.');
            } finally {
                showLoading(false);
            }
        }

        function showLoading(show) {
            document.getElementById('loadingIndicator').style.display = show ? 'block' : 'none';
        }

        async function processPatentClaims(claimsText) {
            // Simulate the Python backend processing
            // In a real application, this would be an API call
            
            // Extract components with reference numbers
            const componentMatches = claimsText.match(/([a-zA-Z\s]+?)\s*\((\d+)\)/g) || [];
            const components = componentMatches.map(match => {
                const [, name, num] = match.match(/([a-zA-Z\s]+?)\s*\((\d+)\)/);
                return { name: name.trim(), refNum: parseInt(num) };
            });

            // Generate connections based on keywords
            const connectionKeywords = ['connected to', 'coupled to', 'in communication with', 'operatively connected'];
            let connectionCount = 0;
            
            connectionKeywords.forEach(keyword => {
                if (claimsText.toLowerCase().includes(keyword)) {
                    connectionCount++;
                }
            });

            // Generate Mermaid code
            const mermaidCode = generateMermaidCode(components, connectionCount);
            
            return {
                mermaidCode,
                stats: {
                    components: components.length,
                    connections: connectionCount
                }
            };
        }

        function generateMermaidCode(components, connectionCount) {
            const config = `%%{init: {
  'theme':'base', 
  'themeVariables': { 
    'primaryColor': '#ffffff', 
    'primaryTextColor': '#000000', 
    'primaryBorderColor': '#000000', 
    'lineColor': '#000000', 
    'background': '#ffffff', 
    'mainBkg': '#ffffff', 
    'secondBkg': '#ffffff', 
    'tertiaryBkg': '#ffffff', 
    'edgeLabelBackground': '#ffffff',
    'clusterBkg': 'rgba(0,0,0,0)',
    'altBackground': '#ffffff',
    'cScale0': '#ffffff', 
    'cScale1': '#ffffff', 
    'cScale2': '#ffffff'
  }, 
  'flowchart': {'curve': 'linear'}, 
  'fontSize': 20
}}%%`;

            let mermaidCode = `${config}\n\nflowchart TB\n`;
            
            // Add title
            mermaidCode += `    TITLE["PATENT SYSTEM DIAGRAM"]\n\n`;
            
            // Add components
            components.forEach(comp => {
                const nodeId = `COMP${comp.refNum}`;
                const componentType = classifyComponent(comp.name);
                
                switch(componentType) {
                    case 'database':
                        mermaidCode += `    ${nodeId}[("${comp.name} ${comp.refNum}")]\n`;
                        break;
                    case 'interface':
                        mermaidCode += `    ${nodeId}[/"${comp.name} ${comp.refNum}"/]\n`;
                        break;
                    case 'display':
                        mermaidCode += `    ${nodeId}[/"${comp.name} ${comp.refNum}"/]\n`;
                        break;
                    default:
                        mermaidCode += `    ${nodeId}["${comp.name} ${comp.refNum}"]\n`;
                }
            });
            
            mermaidCode += `\n`;
            
            // Add connections
            for (let i = 0; i < Math.min(components.length - 1, connectionCount); i++) {
                const from = `COMP${components[i].refNum}`;
                const to = `COMP${components[i + 1].refNum}`;
                mermaidCode += `    ${from} -.->|"<span style='font-size:24px;font-weight:bold;background:white;padding:6px'>Data Flow</span>"| ${to}\n`;
            }
            
            mermaidCode += `\n    %% USPTO-Compliant Styling\n`;
            mermaidCode += `    classDef default fill:#ffffff,stroke:#000000,stroke-width:3px,color:#000000,font-size:20px,font-weight:bold\n`;
            
            const componentIds = components.map(comp => `COMP${comp.refNum}`).join(',');
            if (componentIds) {
                mermaidCode += `    class ${componentIds} default\n`;
            }
            
            return mermaidCode;
        }

        function classifyComponent(name) {
            const nameLower = name.toLowerCase();
            if (nameLower.includes('database') || nameLower.includes('storage') || nameLower.includes('memory')) {
                return 'database';
            } else if (nameLower.includes('interface') || nameLower.includes('sensor')) {
                return 'interface';
            } else if (nameLower.includes('display') || nameLower.includes('screen')) {
                return 'display';
            }
            return 'process';
        }

        async function displayDiagram(mermaidCode, stats, processingTime) {
            currentMermaidCode = mermaidCode;
            
            const output = document.getElementById('mermaidOutput');
            output.innerHTML = `<div class="mermaid">${mermaidCode}</div>`;
            output.className = 'has-content';
            
            // Render the mermaid diagram
            await mermaid.init();
            
            // Update stats
            document.getElementById('componentCount').textContent = stats.components;
            document.getElementById('connectionCount').textContent = stats.connections;
            document.getElementById('processingTime').textContent = `${processingTime}ms`;
            
            // Show action buttons and stats
            document.getElementById('outputActions').style.display = 'flex';
            document.getElementById('statsBar').style.display = 'grid';
        }

        function downloadMermaid() {
            if (!currentMermaidCode) return;
            
            const blob = new Blob([currentMermaidCode], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'patent-diagram.mmd';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        async function copyToClipboard(event) {
            if (!currentMermaidCode) return;
            
            try {
                await navigator.clipboard.writeText(currentMermaidCode);
                
                // Visual feedback
                const btn = event ? event.target.closest('button') : document.querySelector('[onclick="copyToClipboard()"]');
                if (btn) {
                    const originalText = btn.innerHTML;
                    btn.innerHTML = `
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4M11,16.5L18,9.5L16.59,8.09L11,13.67L7.91,10.59L6.5,12L11,16.5Z"/>
                        </svg>
                        Copied!
                    `;
                    
                    setTimeout(() => {
                        btn.innerHTML = originalText;
                    }, 2000);
                }
            } catch (err) {
                console.error('Failed to copy to clipboard:', err);
                alert('Failed to copy to clipboard');
            }
        }
    </script>
</body>
</html>
